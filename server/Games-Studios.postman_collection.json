{
	"info": {
		"_postman_id": "5440e07e-53b8-4137-92a1-caba737d92f9",
		"name": "Games/Studios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37464472"
	},
	"item": [
		{
			"name": "Games",
			"item": [
				{
					"name": "GET ALL GAMES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Data is an array\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test(\"Data is not empty\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.not.be.empty;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET GAME BY ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Properties have correct data types\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.title).to.be.a('string');\r",
									"    pm.expect(responseJson.data.releaseDate).to.be.a('string');\r",
									"    pm.expect(responseJson.data.genre).to.be.an('array');\r",
									"    pm.expect(responseJson.data.averageScore).to.be.a('number');\r",
									"})\r",
									"\r",
									"pm.test(\"Properties have correct values\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.title).to.eql('Counter-Strike 2');\r",
									"    pm.expect(responseJson.data.releaseDate).to.eql('2023-09-27T04:00:00.000Z');\r",
									"    pm.expect(responseJson.data.genre).to.eql(['Shooter']);\r",
									"    pm.expect(responseJson.data.averageScore).to.eql(9);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/games/{{gameId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE GAME",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"ID has been created\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data).to.have.property(\"_id\").that.is.not.null;\r",
									"\r",
									"    pm.collectionVariables.set(\"gameId\", responseJson.data._id);\r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is JSON\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"game\": {\r\n        \"title\": \"Counter-Strike 2\",\r\n        \"releaseDate\": \"9/27/2023\",\r\n        \"genre\": \"Shooter\",\r\n        \"averageScore\": 9\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/games",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE GAME",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is JSON\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Average score is updated correctly\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data.averageScore).to.eql(8.5);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"averageScore\": 8.5 }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/games/{{gameId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE GAME",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Game is no longer present in data\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    const targetId = pm.environment.get(\"gameId\");\r",
									"    let gameIsPresent = false;\r",
									"\r",
									"    data.forEach(game => {\r",
									"        if (game._id === targetId) {\r",
									"            gameIsPresent = true;\r",
									"        }\r",
									"    })\r",
									"\r",
									"    pm.expect(gameIsPresent).to.be.false;\r",
									"})\r",
									"\r",
									"pm.test(\"Game deletion is a success\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success).to.be.true;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/games/{{gameId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Studios",
			"item": [
				{
					"name": "GET ALL STUDIOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Data is an array\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test(\"Data is not empty\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data).to.not.be.empty;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/studios",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"studios"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET STUDIO BY ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Properties have correct data types\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    pm.expect(data.yearEstablished).to.be.a('number');\r",
									"    pm.expect(data.country).to.be.an('string');\r",
									"    pm.expect(data.status).to.be.a('string');\r",
									"})\r",
									"\r",
									"pm.test(\"Properties have correct values\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data.name).to.eql('Arkane Studios');\r",
									"    pm.expect(data.yearEstablished).to.eql(2000);\r",
									"    pm.expect(data.country).to.eql('France');\r",
									"    pm.expect(data.status).to.eql('Active');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/studios/{{studioId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"studios",
								"{{studioId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE STUDIO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"ID has been created\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data).to.have.property(\"_id\").that.is.not.null;\r",
									"\r",
									"    pm.collectionVariables.set(\"studioId\", responseJson.data._id);\r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is JSON\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"studio\": {\r\n        \"name\": \"Arkane Studios\",\r\n        \"yearEstablished\": 2000,\r\n        \"country\": \"France\",\r\n        \"status\": \"Active\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/studios",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"studios"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE STUDIO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Content Type is JSON\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Year established is updated correctly\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"    pm.expect(data.yearEstablished).to.eql(1999);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"yearEstablished\": 1999 }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/studios/{{studioId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"studios",
								"{{studioId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE STUDIO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Studio is no longer present in data\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    const targetId = pm.environment.get(\"studioId\");\r",
									"    let studioIsPresent = false;\r",
									"\r",
									"    data.forEach(studio => {\r",
									"        if (studio._id === targetId) {\r",
									"            studioIsPresent = true;\r",
									"        }\r",
									"    })\r",
									"\r",
									"    pm.expect(studioIsPresent).to.be.false;\r",
									"})\r",
									"\r",
									"pm.test(\"Studio deletion is a success\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success).to.be.true;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/v1/studios/{{studioId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"studios",
								"{{studioId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "gameId",
			"value": ""
		},
		{
			"key": "studioId",
			"value": ""
		}
	]
}